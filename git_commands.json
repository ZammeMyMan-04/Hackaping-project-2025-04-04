[
  {
    "command": "add",
    "description": "Add file contents to the index",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "am",
    "description": "Apply a series of patches from a mailbox",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "archive",
    "description": "Create an archive of files from a named tree",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "bisect",
    "description": "Use binary search to find the commit that introduced a bug",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "branch",
    "description": "List, create, or delete branches",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "bundle",
    "description": "Move objects and refs by archive",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "checkout",
    "description": "Switch branches or restore working tree files",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "cherry-pick",
    "description": "Apply the changes introduced by some existing commits",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "citool",
    "description": "Graphical alternative to git-commit",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "clean",
    "description": "Remove untracked files from the working tree",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "clone",
    "description": "Clone a repository into a new directory",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "commit",
    "description": "Record changes to the repository",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "describe",
    "description": "Give an object a human readable name based on an available ref",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "diff",
    "description": "Show changes between commits, commit and working tree, etc",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "fetch",
    "description": "Download objects and refs from another repository",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "format-patch",
    "description": "Prepare patches for e-mail submission",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "gc",
    "description": "Cleanup unnecessary files and optimize the local repository",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "gitk",
    "description": "The Git repository browser",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "grep",
    "description": "Print lines matching a pattern",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "gui",
    "description": "A portable graphical interface to Git",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "init",
    "description": "Create an empty Git repository or reinitialize an existing one",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "log",
    "description": "Show commit logs",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "maintenance",
    "description": "Run tasks to optimize Git repository data",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "merge",
    "description": "Join two or more development histories together",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "mv",
    "description": "Move or rename a file, a directory, or a symlink",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "notes",
    "description": "Add or inspect object notes",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "pull",
    "description": "Fetch from and integrate with another repository or a local branch",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "push",
    "description": "Update remote refs along with associated objects",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "range-diff",
    "description": "Compare two commit ranges (e.g. two versions of a branch)",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "rebase",
    "description": "Reapply commits on top of another base tip",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "reset",
    "description": "Reset current HEAD to the specified state",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "restore",
    "description": "Restore working tree files",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "revert",
    "description": "Revert some existing commits",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "rm",
    "description": "Remove files from the working tree and from the index",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "scalar",
    "description": "A tool for managing large Git repositories",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "shortlog",
    "description": "Summarize 'git log' output",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "show",
    "description": "Show various types of objects",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "sparse-checkout",
    "description": "Reduce your working tree to a subset of tracked files",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "stash",
    "description": "Stash the changes in a dirty working directory away",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "status",
    "description": "Show the working tree status",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "submodule",
    "description": "Initialize, update or inspect submodules",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "switch",
    "description": "Switch branches",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "tag",
    "description": "Create, list, delete or verify a tag object signed with GPG",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "worktree",
    "description": "Manage multiple working trees",
    "category": "Main Porcelain Commands"
  },
  {
    "command": "config",
    "description": "Get and set repository or global options",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "fast-export",
    "description": "Git data exporter",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "fast-import",
    "description": "Backend for fast Git data importers",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "filter-branch",
    "description": "Rewrite branches",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "mergetool",
    "description": "Run merge conflict resolution tools to resolve merge conflicts",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "pack-refs",
    "description": "Pack heads and tags for efficient repository access",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "prune",
    "description": "Prune all unreachable objects from the object database",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "reflog",
    "description": "Manage reflog information",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "remote",
    "description": "Manage set of tracked repositories",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "repack",
    "description": "Pack unpacked objects in a repository",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "replace",
    "description": "Create, list, delete refs to replace objects",
    "category": "Ancillary Commands / Manipulators"
  },
  {
    "command": "annotate",
    "description": "Annotate file lines with commit information",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "blame",
    "description": "Show what revision and author last modified each line of a file",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "bugreport",
    "description": "Collect information for user to file a bug report",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "count-objects",
    "description": "Count unpacked number of objects and their disk consumption",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "diagnose",
    "description": "Generate a zip archive of diagnostic information",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "difftool",
    "description": "Show changes using common diff tools",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "fsck",
    "description": "Verifies the connectivity and validity of the objects in the database",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "gitweb",
    "description": "Git web interface (web frontend to Git repositories)",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "help",
    "description": "Display help information about Git",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "instaweb",
    "description": "Instantly browse your working repository in gitweb",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "merge-tree",
    "description": "Perform merge without touching index or working tree",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "rerere",
    "description": "Reuse recorded resolution of conflicted merges",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "show-branch",
    "description": "Show branches and their commits",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "verify-commit",
    "description": "Check the GPG signature of commits",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "verify-tag",
    "description": "Check the GPG signature of tags",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "version",
    "description": "Display version information about Git",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "whatchanged",
    "description": "Show logs with differences each commit introduces",
    "category": "Ancillary Commands / Interrogators"
  },
  {
    "command": "archimport",
    "description": "Import a GNU Arch repository into Git",
    "category": "Interacting with Others"
  },
  {
    "command": "cvsexportcommit",
    "description": "Export a single commit to a CVS checkout",
    "category": "Interacting with Others"
  },
  {
    "command": "cvsimport",
    "description": "Salvage your data out of another SCM people love to hate",
    "category": "Interacting with Others"
  },
  {
    "command": "cvsserver",
    "description": "A CVS server emulator for Git",
    "category": "Interacting with Others"
  },
  {
    "command": "imap-send",
    "description": "Send a collection of patches from stdin to an IMAP folder",
    "category": "Interacting with Others"
  },
  {
    "command": "p4",
    "description": "Import from and submit to Perforce repositories",
    "category": "Interacting with Others"
  },
  {
    "command": "quiltimport",
    "description": "Applies a quilt patchset onto the current branch",
    "category": "Interacting with Others"
  },
  {
    "command": "request-pull",
    "description": "Generates a summary of pending changes",
    "category": "Interacting with Others"
  },
  {
    "command": "send-email",
    "description": "Send a collection of patches as emails",
    "category": "Interacting with Others"
  },
  {
    "command": "svn",
    "description": "Bidirectional operation between a Subversion repository and Git",
    "category": "Interacting with Others"
  },
  {
    "command": "apply",
    "description": "Apply a patch to files and/or to the index",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "checkout-index",
    "description": "Copy files from the index to the working tree",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "commit-graph",
    "description": "Write and verify Git commit-graph files",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "commit-tree",
    "description": "Create a new commit object",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "hash-object",
    "description": "Compute object ID and optionally create an object from a file",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "index-pack",
    "description": "Build pack index file for an existing packed archive",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "merge-file",
    "description": "Run a three-way file merge",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "merge-index",
    "description": "Run a merge for files needing merging",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "mktag",
    "description": "Creates a tag object with extra validation",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "mktree",
    "description": "Build a tree-object from ls-tree formatted text",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "multi-pack-index",
    "description": "Write and verify multi-pack-indexes",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "pack-objects",
    "description": "Create a packed archive of objects",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "prune-packed",
    "description": "Remove extra objects that are already in pack files",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "read-tree",
    "description": "Reads tree information into the index",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "symbolic-ref",
    "description": "Read, modify and delete symbolic refs",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "unpack-objects",
    "description": "Unpack objects from a packed archive",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "update-index",
    "description": "Register file contents in the working tree to the index",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "update-ref",
    "description": "Update the object name stored in a ref safely",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "write-tree",
    "description": "Create a tree object from the current index",
    "category": "Low-level Commands / Manipulators"
  },
  {
    "command": "cat-file",
    "description": "Provide contents or details of repository objects",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "cherry",
    "description": "Find commits yet to be applied to upstream",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "diff-files",
    "description": "Compares files in the working tree and the index",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "diff-index",
    "description": "Compare a tree to the working tree or index",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "diff-tree",
    "description": "Compares the content and mode of blobs found via two tree objects",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "for-each-ref",
    "description": "Output information on each ref",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "for-each-repo",
    "description": "Run a Git command on a list of repositories",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "get-tar-commit-id",
    "description": "Extract commit ID from an archive created using git-archive",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "ls-files",
    "description": "Show information about files in the index and the working tree",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "ls-remote",
    "description": "List references in a remote repository",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "ls-tree",
    "description": "List the contents of a tree object",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "merge-base",
    "description": "Find as good common ancestors as possible for a merge",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "name-rev",
    "description": "Find symbolic names for given revs",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "pack-redundant",
    "description": "Find redundant pack files",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "rev-list",
    "description": "Lists commit objects in reverse chronological order",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "rev-parse",
    "description": "Pick out and massage parameters",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "show-index",
    "description": "Show packed archive index",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "show-ref",
    "description": "List references in a local repository",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "unpack-file",
    "description": "Creates a temporary file with a blob's contents",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "var",
    "description": "Show a Git logical variable",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "verify-pack",
    "description": "Validate packed Git archive files",
    "category": "Low-level Commands / Interrogators"
  },
  {
    "command": "daemon",
    "description": "A really simple server for Git repositories",
    "category": "Low-level Commands / Syncing Repositories"
  },
  {
    "command": "fetch-pack",
    "description": "Receive missing objects from another repository",
    "category": "Low-level Commands / Syncing Repositories"
  },
  {
    "command": "http-backend",
    "description": "Server side implementation of Git over HTTP",
    "category": "Low-level Commands / Syncing Repositories"
  },
  {
    "command": "send-pack",
    "description": "Push objects over Git protocol to another repository",
    "category": "Low-level Commands / Syncing Repositories"
  },
  {
    "command": "update-server-info",
    "description": "Update auxiliary info file to help dumb servers",
    "category": "Low-level Commands / Syncing Repositories"
  },
  {
    "command": "check-attr",
    "description": "Display gitattributes information",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "check-ignore",
    "description": "Debug gitignore / exclude files",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "check-mailmap",
    "description": "Show canonical names and email addresses of contacts",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "check-ref-format",
    "description": "Ensures that a reference name is well formed",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "column",
    "description": "Display data in columns",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "credential",
    "description": "Retrieve and store user credentials",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "credential-cache",
    "description": "Helper to temporarily store passwords in memory",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "credential-store",
    "description": "Helper to store credentials on disk",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "fmt-merge-msg",
    "description": "Produce a merge commit message",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "hook",
    "description": "Run git hooks",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "interpret-trailers",
    "description": "Add or parse structured information in commit messages",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "mailinfo",
    "description": "Extracts patch and authorship from a single e-mail message",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "mailsplit",
    "description": "Simple UNIX mbox splitter program",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "merge-one-file",
    "description": "The standard helper program to use with git-merge-index",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "patch-id",
    "description": "Compute unique ID for a patch",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "sh-i18n",
    "description": "Git's i18n setup code for shell scripts",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "sh-setup",
    "description": "Common Git shell script setup code",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "stripspace",
    "description": "Remove unnecessary whitespace",
    "category": "Low-level Commands / Internal Helpers"
  },
  {
    "command": "attributes",
    "description": "Defining attributes per path",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "cli",
    "description": "Git command-line interface and conventions",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "hooks",
    "description": "Hooks used by Git",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "ignore",
    "description": "Specifies intentionally untracked files to ignore",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "mailmap",
    "description": "Map author/committer names and/or E-Mail addresses",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "modules",
    "description": "Defining submodule properties",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "repository-layout",
    "description": "Git Repository Layout",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "revisions",
    "description": "Specifying revisions and ranges for Git",
    "category": "User-facing repository, command and file interfaces"
  },
  {
    "command": "format-bundle",
    "description": "The bundle file format",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "format-chunk",
    "description": "Chunk-based file formats",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "format-commit-graph",
    "description": "Git commit-graph format",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "format-index",
    "description": "Git index format",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "format-pack",
    "description": "Git pack format",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "format-signature",
    "description": "Git cryptographic signature formats",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "protocol-capabilities",
    "description": "Protocol v0 and v1 capabilities",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "protocol-common",
    "description": "Things common to various protocols",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "protocol-http",
    "description": "Git HTTP-based protocols",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "protocol-pack",
    "description": "How packs are transferred over-the-wire",
    "category": "Developer-facing file formats, protocols and other interfaces"
  },
  {
    "command": "protocol-v2",
    "description": "Git Wire Protocol, Version 2",
    "category": "Developer-facing file formats, protocols and other interfaces"
  }
]